
# # ----------------------------------------------------------------
# # Course: EECS 110, Northwestern University
# # Term: Winter 2019
# # Autogenerated from: "../lectures/lecture_14/notebooks/Evanston Food Inspections.ipynb"
# # 
# # Note: Each example is commented out. To uncomment, highlight
# # the area you want to uncomment and type "cmd /" (which both adds
# # and removes comments).
# # ----------------------------------------------------------------




# # --------------------------------------------------------------------------------
# # ## Pandas Cheatsheet
# # * Jupyter Notebooks provide a way of organizing data-related calculations in order to help your user understand *how you arrived at a particular chart or calculation using Python.
# # * Pandas is a library that helps you work with and visualize data using Python. 
# # 
# # Here are some commands that might be useful for you as you work with the Pandas library:
# # 
# # | Command | Job |
# # |--|--|
# # | .read_csv| load dataframe from a CSV file |
# # | .head(n)|limits the number of rows to n |
# # | .set_index|sets the primary key of the table|
# # | .join|merges two tables together based on their key |
# # | dataframe['a', 'b']| only show columns a and b from the dataframe|
# # | .groupby(['a', 'b'])| performs an aggregate calculation (count, min, max) by columns a and b|
# # | .sort_values|sorts dataframe by the columns specified|
# # | dataframe[dataframe['business_license'] == business_license] | filters by a rule |
# # | dataframe.column_name | extracts 1 column from dataframe|
# # | dataframe.plot.barh()| plots the dataframe as a bar chart|

# # --------------------------------------------------------------------------------

# import pandas as pd
# %matplotlib inline



# # --------------------------------------------------------------------------------
# # ### 1. read_csv
# # For creating a new dataframe from a CSV file
# # --------------------------------------------------------------------------------

# # Load Dataframes from disk:
# violations = pd.read_csv("../data/Food_Establishment_Violations.csv", encoding="latin")




# # --------------------------------------------------------------------------------
# # ### 2. head
# # For limiting the number of rows
# # --------------------------------------------------------------------------------

# #preview the violations table:
# violations.head(3)



# # --------------------------------------------------------------------------------
# # ### 3. column indexing (subsetting)
# # Sometimes you only want to look at a few of the columns. To only view a few columns in Pandas, list them inside of brackets (as seen below).  This makes a copy of the dataframe that only includes the columns you selected.
# # --------------------------------------------------------------------------------

# # show the number of violations by restaurant:
# 
# counts_table = violations[["business_license", "violation"]]
# counts_table.head(3)



# # --------------------------------------------------------------------------------
# # ### 4. groupby + aggregation method
# # Sometimes you want to get a count of things by a particular attribute. For example:
# # 
# # > How many violations does each restaurant have?
# # 
# # The code below performs the count operation for every distint business license using the groupby method:
# # --------------------------------------------------------------------------------

# counts_table = counts_table.groupby(["business_license"]).count()
# counts_table.head(5)



# # --------------------------------------------------------------------------------
# # ### 5. sort_values
# # Sords the table according to the column specified in either ascending or descending order:
# # --------------------------------------------------------------------------------

# counts_table = counts_table.sort_values('violation', ascending=False)
# counts_table.head(10)



# # --------------------------------------------------------------------------------
# # ### 6. plot
# # Create a chart of your findings using Matplotlib.
# # --------------------------------------------------------------------------------

# # get top 15:
# violation_frequencies = counts_table.violation.head(15)
# 
# #reverse ordering:
# violation_frequencies = violation_frequencies.iloc[::-1]
# 
# # define the plot parameters (color, etc.)
# violation_frequencies.plot(kind='barh', figsize=(8, 8), color='#86bf91', zorder=2, width=0.65)
# 
# # draw the horizontal bar chart:
# violation_frequencies.plot.barh()




# # --------------------------------------------------------------------------------
# # ### 7. filtering
# # To filter the table, define a rule, and then index the table according to the rule (kind of a weird syntax).
# # --------------------------------------------------------------------------------

# # show the most problematic restaurant / food establishment (09FOOD-0231, 09FOOD-0117, ...):
# 
# business_license = input('which food establishment do you want to know about? ')
# 
# # 1. create a filter rule
# rule = violations['business_license'] == business_license
# 
# # 2. apply the filter rule as an index to the dataframe
# violations[rule]



# # --------------------------------------------------------------------------------
# # ## But which restaurants are these?
# # We have their business license information, but can we figure out who they are?
# # --------------------------------------------------------------------------------

# # load businesses data:
# businesses = pd.read_csv("../data/Food_Establishment_Businesses.csv", encoding="latin")
# businesses.head(3)



# # --------------------------------------------------------------------------------
# # ### 8. joining
# # Joining two tables on a column combines the two tables together based on their business license (in this case):
# # --------------------------------------------------------------------------------

# # let's merge the two tables together:
# merged_table = violations.set_index('business_license').join(businesses.set_index('business_license'))
# merged_table = merged_table.reindex(columns=[
#     'violation_date', 'violation', 'inspector_comments', 'business_name', 
#     'address', 'city', 'state', 'zip_code', 'location', 'last_inspection_date'
# ])
# merged_table.head(3)
# # perform the same calculations as before, but on the new table:
# # show the number of violations by restaurant:
# merged_table_simplified = merged_table[["business_name", "violation"]]
# counts_table = merged_table_simplified.groupby(["business_name", "business_license"]).count()
# counts_table = counts_table.sort_values('violation', ascending=False)
# 
# counts_table.head(3)



# # --------------------------------------------------------------------------------
# # ### Plot the new chart with the business names
# # --------------------------------------------------------------------------------

# violation_frequencies = counts_table.violation.head(50)
# 
# #reverse ordering:
# violation_frequencies = violation_frequencies.iloc[::-1]
# 
# violation_frequencies.plot(kind='barh', figsize=(8, 30), width=0.65)
# violation_frequencies.plot.barh()
